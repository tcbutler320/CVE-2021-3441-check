import requests
import json
import sys
import getopt 
import urllib
import os 
import subprocess 
import re
import datetime
from bs4 import BeautifulSoup as bs
import lib.core.constants as c 
from lib.core.requests import request
from lib.core.iocCheck import check_header,find_compromise,check_content
from lib.core.printer import printer
from lib.utils.help import help,usage


# A simple python script that checks targets for signs 
# of compromise for CVE, XSS on HP Printer Embedded Webserver
#                          Author: Tyler Butler, @tbutler0x90

def get_stats(counter):
    sys.stdout.write(c.BIWhite)
    print('{!} ',counter,' Targets Searched')
    return

def handler(infile,outfile,verbosity,target):
    # TODO Error Handling
    if len(target) > 1:
        response, target = request(infile,outfile,verbosity,target)
        payload = find_compromise(response, verbosity)
        printer(payload, target, outfile)
        sys.stdout.write(c.BIWhite)
    else: 
        with open(infile) as target_list: 
            fstring = target_list.readlines() 
        pattern = re.compile(r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})') 
        targets = []
        for line in fstring:
            targets.append(pattern.search(line)[0]) 
        
        counter = 1
        for url in targets:
            print('{!} -------- {INFO} Test #  ',counter)
            response, url = request(infile,outfile,verbosity,url)
            payload = find_compromise(response, verbosity)
            printer(payload, url, outfile)
            sys.stdout.write(c.BIWhite)
            counter += 1

        if verbosity == 2:
            print('{!} Outfile File Located at :',outfile)
        print(c.exit)

    sys.exit(0)


# Get arguments from the user, decide which function to call
def main(argv):
    infile = ''
    outfile = ''
    target = ''
    verbosity = 1
    sys.stdout.write(c.BIWhite)
    print(c.art,c.welcome)
    if len(sys.argv) == 1:
        usage()
    try:
      opts, args = getopt.getopt(argv,"hIi:O:v",["ifile=","ofile=","itarget=","verbosity="])
    except getopt.GetoptError:  
        usage()
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            help()
            sys.exit()
        elif opt in ("-I", "--ifile"):
            infile = arg
        elif opt in ("-i", "--itarget"):
            target = arg
        elif opt in ("-O", "--ofile"):
            outfile = arg
        elif opt in ("-v", "--verbosity"):
            verbosity = arg
    if len(target) > 1:
        handler(infile,outfile,verbosity,target)
    handler(infile,outfile,verbosity,target)

if __name__ == "__main__":
   main(sys.argv[1:])